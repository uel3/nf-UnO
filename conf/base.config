/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/uno Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

process {

    // TODO nf-core: Check the defaults for all processes
    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    time   = { check_max( 4.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and re-use the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    // TODO nf-core: Customise requirements for specific processes.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    withLabel:process_single {
        cpus   = { check_max( 1                  , 'cpus'    ) }
        memory = { check_max( 6.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_low {
        cpus   = { check_max( 2     * task.attempt, 'cpus'    ) }
        memory = { check_max( 12.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 4.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_medium {
        cpus   = { check_max( 6     * task.attempt, 'cpus'    ) }
        memory = { check_max( 36.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 8.h   * task.attempt, 'time'    ) }
    }
    withLabel:process_high {
        cpus   = { check_max( 12    * task.attempt, 'cpus'    ) }
        memory = { check_max( 72.GB * task.attempt, 'memory'  ) }
        time   = { check_max( 16.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_long {
        time   = { check_max( 20.h  * task.attempt, 'time'    ) }
    }
    withLabel:process_high_memory {
        memory = { check_max( 200.GB * task.attempt, 'memory' ) }
    }
    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }
    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }
    withName:CUSTOM_DUMPSOFTWAREVERSIONS {
        cache = false
    }
    withName: BT2_HOST_REMOVAL_BUILD {
        cpus   = { check_max (10    * task.attempt, 'cpus'   ) }
        memory = { check_max (20.GB * task.attempt, 'memory' ) }
        time   = { check_max (4.h   * task.attempt, 'time'   ) }
    }
    withName: BT2_HOST_REMOVAL_ALIGN {
        cpus   = { check_max (10    * task.attempt, 'cpus'   ) }
        memory = { check_max (10.GB * task.attempt, 'memory' ) }
        time   = { check_max (6.h   * task.attempt, 'time'   ) }
    }
    //MEGAHIT returns exit code 250 when running out of memory -modfied memory to use .9 of available memory
     withName: MEGAHIT {
        cpus          = { check_megahit_cpus (12, task.attempt  ) } 
        memory        = { params.max_memory }
        time          = { check_max (48.h  * task.attempt, 'time'   ) }
        errorStrategy = { task.exitStatus in [143,137,104,134,139,250] ? 'retry' : 'finish' }
    }
    withName: BOWTIE2_ALIGNASSEMBLY {
        cpus          = { check_max (2    * task.attempt, 'cpus'   ) }
        memory        = { check_max (8.GB * task.attempt, 'memory' ) }
        time          = { check_max (8.h  * task.attempt, 'time'   ) }
        errorStrategy = { task.exitStatus in [143,137,104,134,139,247] ? 'retry' : 'finish' }
    }
    wuthName: BOWTIE2_ALIGNREADS {
        cpus          = { check_max (2    * task.attempt, 'cpus'   ) }
        memory        = { check_max (8.GB * task.attempt, 'memory' ) }
        time          = { check_max (8.h  * task.attempt, 'time'   ) }
        errorStrategy = { task.exitStatus in [143,137,104,134,139,247] ? 'retry' : 'finish' }
    }
    withName: METABAT2_METABAT2 {
        cpus   = { check_max (8     * task.attempt, 'cpus'   ) }
        memory = { check_max (20.GB * task.attempt, 'memory' ) }
        time   = { check_max (8.h   * task.attempt, 'time'   ) }
    }
    withName: MAG_DEPTHS {
        memory = { check_max (16.GB * task.attempt, 'memory' ) }
    }
    withName: MAXBIN2 {
        cpus   = { check_max (8     * task.attempt, 'cpus'   ) }
        memory = { check_max (20.GB * task.attempt, 'memory' ) }
        time   = { check_max (8.h   * task.attempt, 'time'   ) }
        // often fails when insufficient information, so we allow it to gracefully fail without failing the pipeline
        errorStrategy = { task.exitStatus in [ 1, 255 ] ? 'ignore' : 'retry' }
    }

    withName: DASTOOL_DASTOOL {
        // if SCGs not found, bins cannot be assigned and DAS_tool will die with exit status 1
        errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : task.exitStatus == 1 ? 'ignore' : 'finish' }
    }
}