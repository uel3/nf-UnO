/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }, 
        enabled: false
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: BT2_HOST_REMOVAL_ALIGN {
        ext.args = params.host_removal_verysensitive ? "--very-sensitive" : "--sensitive"
        ext.args2 = params.host_removal_save_ids ? "--host_removal_save_ids" : ''
        ext.prefix = { "${meta.id}_run${meta.run}_host_removed" }
        publishDir = [
            [
                path: { "${params.outdir}/QC_shortreads/remove_host" },
                mode: params.publish_dir_mode,
                pattern: "*{.log,read_ids.txt}"
            ],
            [
                path: { "${params.outdir}/QC_shortreads/remove_host" },
                mode: params.publish_dir_mode,
                pattern: "*.unmapped*.fastq.gz",
                enabled: params.save_hostremoved_reads
            ]
        ]
        tag = { "${meta.id}_run${meta.run}" }
    }
    withName: BT2_HOST_REMOVAL_ALIGN_VERIFY {
        ext.args = params.host_removal_verysensitive ? "--very-sensitive" : "--sensitive"
        ext.args2 = params.host_removal_save_ids ? "--host_removal_save_ids" : ''
        ext.prefix = { "${meta.id}_run${meta.run}_host_removed" }
        publishDir = [
            [
                path: { "${params.outdir}/QC_shortreads/remove_host/verify" },
                mode: params.publish_dir_mode,
                pattern: "*{.log,read_ids.txt}"
            ],
            [
                path: { "${params.outdir}/QC_shortreads/remove_host/verify" },
                mode: params.publish_dir_mode,
                pattern: "*.unmapped*.fastq.gz",
                enabled: params.save_hostremoved_reads
            ]
        ]
        tag = { "${meta.id}_run${meta.run}" }
    }
    withName: MIDAS2_DB {
        publishDir = [
            path: { "${params.outdir}/MIDAS2/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: MIDAS2_SPECIES_SNPS {
        publishDir = [
            path: { "${params.outdir}/MIDAS2/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.args = [
            "--select_by ${params.midas2_snps_select_by}",
            "--select_threshold ${params.midas2_median_marker_coverage},${params.midas2_unique_fraction_covered}"
        ].join(' ').trim()
    }
    withName: MIDAS2_PARSE {
        publishDir = [
            path: { "${params.outdir}/MIDAS2/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: COMBINE_MIDAS2_REPORTS {
        publishDir = [
            path: { "${params.outdir}/MIDAS2/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: FASTQC_TRIMMED {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/FastQC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: TRIMMOMATIC {
        ext.args = '-phred33'
        ext.args2 = { "ILLUMINACLIP:${params.adapter_seqeunce}:2:30:10:8:True LEADING:3 TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36" }
        publishDir = [
            path: { "${params.outdir}/Trimmomatic" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: DASTOOL_FASTATOCONTIG2BIN_METABAT2 {
        ext.prefix = { "${meta.assembler}-MetaBAT2-${meta.id}" }
    }

    withName: DASTOOL_FASTATOCONTIG2BIN_MAXBIN2 {
        ext.prefix = { "${meta.assembler}-MaxBin2-${meta.id}" }
    }

    withName: DASTOOL_DASTOOL {
        publishDir = [
            [
                path: { "${params.outdir}/GenomeBinning/DASTool" },
                mode: params.publish_dir_mode,
                pattern: '*.{tsv,log,eval,seqlength}'
            ],
        ]
        ext.prefix = { "${meta.assembler}-DASTool-${meta.id}" }
        ext.args = "--write_bins --write_unbinned --write_bin_evals --score_threshold ${params.refine_bins_dastool_threshold} --debug"
    }

    withName: RENAME_POSTDASTOOL {
        publishDir = [
            [
                path: { "${params.outdir}/GenomeBinning/DASTool/unbinned" },
                mode: params.publish_dir_mode,
                pattern: '*-DASToolUnbinned-*.fa'
            ],
            [
                path: { "${params.outdir}/GenomeBinning/DASTool/bins" },
                mode: params.publish_dir_mode,
                // pattern needs to be updated in case of new binning methods
                pattern: '*-{MetaBAT2,MaxBin2}Refined-*.fa'
            ]
        ]
    }
    withName: ARIA2 {
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC/CheckM/checkm_downloads" },
            mode: params.publish_dir_mode,
            overwrite: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: params.save_checkm_data
        ]
    }

    withName: 'CHECKM_LINEAGEWF' {
        tag = { "${meta.assembler}-${meta.binner}-${meta.refinement}-${meta.id}" }
        ext.prefix = { "${meta.assembler}-${meta.binner}-${meta.refinement}-${meta.id}_wf" }
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC/CheckM" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CHECKM_QA' {
        ext.prefix = { "${meta.assembler}-${meta.binner}-${meta.refinement}-${meta.id}_qa" }
        ext.args = "-o 2 --tab_table"
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC/CheckM" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'COMBINE_CHECKM_TSV' {
        ext.prefix = { "checkm_summary" }
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
   
   withName: CHECKM_MULTIQC_REPORT {
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/QC" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/multiqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: MEGAHIT {
        ext.args = '--presets meta-large'
        publishDir = [
            path: { "${params.outdir}/Assembly" },
            mode: params.publish_dir_mode,
            saveAs: {
                filename -> filename.equals('versions.yml') ? null :
                filename.indexOf('.contigs.fa.gz') > 0      ? filename :
                filename.indexOf('.log') > 0                ? filename : null }
        ]
    }
    withName: BOWTIE2_ALIGNASSEMBLY {
        ext.prefix = { "${meta.id}.assembly" }
        publishDir = [
            [
                path: { "${params.outdir}/Assembly/${assembly_meta.assembler}/QC/${assembly_meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*.log"
            ],
            [
                path: { "${params.outdir}/Assembly/${assembly_meta.assembler}/QC/${assembly_meta.id}" },
                mode: params.publish_dir_mode,
                pattern: "*.{bam,bai}",
                enabled: params.save_assembly_mapped_reads
            ]
        ]
    }
    withName: METABAT2_JGISUMMARIZEBAMCONTIGDEPTHS {
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/depths/contigs" },
            mode: params.publish_dir_mode,
            pattern: '*-depth.txt.gz'
        ]
        ext.prefix = { "${meta.assembler}-${meta.id}-depth" }
    }

    withName: METABAT2_METABAT2 {
        publishDir = [
            [
                path: { "${params.outdir}/GenomeBinning/MetaBAT2/" },
                mode: params.publish_dir_mode,
                pattern: '*[!lowDepth|tooShort|unbinned].fa.gz'
            ],
            [
                path: { "${params.outdir}/GenomeBinning/MetaBAT2/discarded" },
                mode: params.publish_dir_mode,
                pattern: '*{tooShort,lowDepth}.fa.gz'
            ],
            [
                path: { "${params.outdir}/GenomeBinning/MetaBAT2/log" },
                mode: params.publish_dir_mode,
                pattern: '*.log'
            ]
        ]
        ext.prefix = { "${meta.assembler}-MetaBAT2-${meta.id}" }
        ext.args = [
            params.min_contig_size < 1500 ? "-m 1500" : "-m ${params.min_contig_size}",
            "--unbinned",
            "--seed ${params.metabat_rng_seed}"
        ].join(' ').trim()
    }

    withName: MAXBIN2 {
        publishDir = [
            [
                path: { "${params.outdir}/GenomeBinning/MaxBin2/discarded" },
                mode: params.publish_dir_mode,
                pattern: '*.tooshort.gz'
            ],
            [
            path: { "${params.outdir}/GenomeBinning/MaxBin2/logs" },
            mode: params.publish_dir_mode,
            pattern: '*.log.gz'
            ]
        ]
        ext.prefix = { "${meta.assembler}-MaxBin2-${meta.id}" }
        // if no gene found, will crash so allow ignore so rest of pipeline
        // completes but without MaxBin2 results
    }

    withName: ADJUST_MAXBIN2_EXT {
        publishDir = [
            [
                path: { "${params.outdir}/GenomeBinning/MaxBin2/bins/" },
                mode: params.publish_dir_mode,
                pattern: '*.fa.gz'
            ],
        ]
    }
    withName: SPLIT_FASTA {
        publishDir = [
            [
                path: { "${params.outdir}/GenomeBinning/${meta.binner}/unbinned" },
                mode: params.publish_dir_mode,
                pattern: '*.*[0-9].fa.gz'
            ],
            [
                path: { "${params.outdir}/GenomeBinning/${meta.binner}/unbinned/discarded" },
                mode: params.publish_dir_mode,
                pattern: '*.pooled.fa.gz'
            ],
            [
                path: { "${params.outdir}/GenomeBinning/${meta.binner}/unbinned/discarded" },
                mode: params.publish_dir_mode,
                pattern: '*.remaining.fa.gz'
            ]
        ]
    }
    withName: 'MAG_DEPTHS_PLOT|MAG_DEPTHS_SUMMARY' {
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/depths/bins" },
            mode: params.publish_dir_mode,
            pattern: '*.{png,yaml,tsv}'
        ]
    }
    withName: 'BIN_DEPTHS_PLOT' {
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/depths/bins" },
            mode: params.publish_dir_mode,
            pattern: '*.{png,tsv}'
        ]
    }
    withName: 'READ_JGISUMMARIZEBAMCONTIGDEPTHS' {
        publishDir = [
            path: { "${params.outdir}/GenomeBinning/depths/bins" },
            mode: params.publish_dir_mode,
            pattern: '*.txt.gz'
        ]
    }
}